setwd("E:/towork/study/r-studio/projects/pricingoptimization")
priceData <- read.csv("wtpData.csv")
View(priceData)
ssummary(priceData)
summary(priceData)
sd(priceData$Wtp)
plot(density(priceData$Wtp))
hist(density(priceData$Wtp))
plot(density(priceData$Wtp))
hist(priceData$Wtp)
dens <-density(priceData$Wtp
plot(dens)
dens <-density(priceData$Wtp)
plot(dens)
hist(dens)
hist(priceData$Wtp)
priceData <- read.csv("wtpData.csv")
summary(priceData)
sd(priceData$Wtp) # Standard Deviation
dens <-density(priceData$Wtp)
plot(dens)
# producing better chart with ggplot
library(ggplot2)
ggplot(priceData$Wtp, aes(Wtp))+
geom_density(fill="yellow", alpha =.3) +
labs(x="Willingness to pay",y="dsitribution of data" )+
geom_vline(xintercept = 50, size=2, color="red", linetype="dashed" )
ggplot(priceData, aes(Wtp))+
geom_density(fill="yellow", alpha =.3) +
labs(x="Willingness to pay",y="dsitribution of data" )+
geom_vline(xintercept = 50, size=2, color="red", linetype="dashed" )
ggplot(priceData, aes(Wtp))+
geom_density(fill="yellow", alpha =.3) +
labs(x="Willingness to pay",y="% per WTP" )+
geom_vline(xintercept = 50, size=2, color="red", linetype="dashed" )
sd(priceData$Wtp) # Standard Deviation
install.packages("fitdistrplus")
library(fitdistrplus)
r fitn <-fitdist(priceData$Wtp, ) summary(fitn)
rfitn <-fitdist(priceData$Wtp, ) summary(fitn)
fitn <-fitdist(priceData$Wtp, )
fitn <-fitdist(priceData$Wtp, ) summary(fitn)
fitn <-fitdist(priceData$Wtp, "mle")
fitn <-fitdist(priceData$Wtp,"gamma", method="mme")
summary(fitn)
fitn <-fitdist(priceData$Wtp,"norm ", method="mme")
fitn <-fitdist(priceData$Wtp,"norm", method="mme")
summary(fitn)
fitw <-fitdist(priceData$Wtp,"logis", method="mle")
summary(fitw)
plot(fitw)
# Reading Data
priceData <- read.csv("wtpData.csv")
summary(priceData)
sd(priceData$Wtp) # Standard Deviation
dens <-density(priceData$Wtp)
plot(dens)
# producing better chart with ggplot
library(ggplot2)
ggplot(priceData, aes(Wtp))+
geom_density(fill="yellow", alpha =.3) +
labs(x="Willingness to pay",y="% per WTP" )+
geom_vline(xintercept = 50, size=2, color="red", linetype="dashed" )
install.packages("fitdistrplus")
library(fitdistrplus)
fitn <-fitdist(priceData$Wtp,"norm", method="mme")
summary(fitn)
fitw <-fitdist(priceData$Wtp,"logis", method="mle")
summary(fitw)
plot(fitw)
plot(fitw)
# fit the normal density to the data, using the method of maximum likelihood
fitw <-fitdist(priceData$Wtp,"logis", method="mle")
summary(fitw)
plot(fitw)
# computes the demand function based on the logistic distribution
# demand at a given price p is given by (1 - cdf(p))
demand <- function(x,m,s, mktSize){ mktSize*(1-plogis(x, location = m, scale = s)) }
plot(demand)
# computes the demand function based on the logistic distribution
# demand at a given price p is given by (1 - cdf(p))
m = 49.4
s= 2.42
demand <- function(x,m,s, mktSize){ mktSize*(1-plogis(x, location = m, scale = s)) }
plot(demand)
mktsize=1000
demand <- function(x,m,s, mktSize){ mktSize*(1-plogis(x, location = m, scale = s)) }
plot(demand)
ggplot(priceData, aes(x=Wtp))+
geom_histogram(aes(y="density")) +
labs(x="Willingness to pay",y="% per WTP" )+
geom_vline(xintercept = 50, size=2, color="red", linetype="dashed" )
ggplot(priceData, aes(x=Wtp))+
geom_histogram(aes(y="density"))
ggplot(priceData, aes(x=Wtp))+
geom_density(fill="yellow", alpha =.3) +
labs(x="Willingness to pay",y="% per WTP" )+
geom_vline(xintercept = 50, size=2, color="red", linetype="dashed" )
base <- ggplot(priceData, aes(x=Wtp))+
geom_density(fill="yellow", alpha =.3) +
labs(x="Willingness to pay",y="% per WTP" )+
geom_vline(xintercept = 50, size=2, color="red", linetype="dashed" )
base
base <- ggplot(priceData, aes(x=Wtp))+
geom_density(fill="yellow", alpha =.3) +
labs(x="Willingness to pay",y="% per WTP" )
base
base+stat_function(fun=dnorm, args = list(mean = m, sd=s), color="black")
fitn <-fitdist(priceData$Wtp,"norm", method="mme")
summary(fitn)
fitn <-fitdist(priceData$Wtp,"norm")
summary(fitn)
# fit the logistic to the data, using the method of maximum likelihood
fitw <-fitdist(priceData$Wtp,"logis", method="mle")
# fit the logistic to the data, using the method of maximum likelihood
fitw <-fitdist(priceData$Wtp,"logis")
summary(fitw)
plot(fitw)
mktSize*(1-plogis(x, location = m, scale = s)) }
# computes the demand function based on the logistic distribution
# demand at a given price p is given by (1 - cdf(p))
demand <- function(x,m,s, mktSize){
mktSize*(1-plogis(x, location = m, scale = s)) }
# plotting the demand
mktSize <- 10000
demandcurve = ggplot(priceData, aes(x=Wtp))+stat_function(fun = demand, args = list(m,s,mktsize),
color="Black")+theme_minimal()+ylab("Demand")+xlab("price")
demandcurve
# having the demand curve if you know the marginal cost you can estimate profit
profit <- function(price,cost, m,s,mktSize){(price-cost)*demand(price, m, s, mktSize)}
#computing the profit for different prices and marginal cost
profit(20,15,m,s,10000)
profit(35,15,m,s,10000)
# the optimal price for maximization our profit
res <- optim(22, profit,cost=15,m=m, s=s, mktSize=10000, method = "BFGS",
control = list(fnscale=-1))
optPrice <- res$par
optProfit <- (res$value)
optPrice
optProfit
# Uncertainty and Bootstrapping Demand Curves
# It is not possible to measure wtp for every one
# So we come up with statistics
# but we must measure the uncertainty
# bootstrap = given total population is equal to our sample then
# randomely select n number of that as a new sample for test
# repeat this test as many as it is sutible for instance 1000 times
# bootstapping to construct 1000 bootstrap samples
n <-60
cost<-15
for(i in 1:1000){ bsample<-sample(priceData$Wtp, n, replace=TRUE)
mb<-mean(bsample) sb<-sqrt(var(bsample)*3/pi^2)
bootProfit[i]<-(profit(optPrice, cost, mb, sb,10000)) }
for(i in 1:1000){ bsample<-sample(priceData$Wtp, n, replace=TRUE)
mb<-mean(bsample) sb<-sqrt(var(bsample)*3/pi^2)
bootProfit[i]<-(profit(optPrice, cost, mb, sb,10000))}
for(i in 1:1000){bsample <- sample(priceData$Wtp, n, replace=TRUE)
mb<-mean(bsample) sb<-sqrt(var(bsample)*3/pi^2)
bootProfit[i]<-(profit(optPrice, cost, mb, sb,10000))}
bootProfit[i]<- profit(optPrice, cost, mb, sb,10000)}
# Uncertainty and Bootstrapping Demand Curves
# It is not possible to measure wtp for every one
# So we come up with statistics
# but we must measure the uncertainty
# bootstrap = given total population is equal to our sample then
# randomely select n number of that as a new sample for test
# repeat this test as many as it is sutible for instance 1000 times
# bootstapping to construct 1000 bootstrap samples
n <-60
bootProfit <- rep(0.0, 1000)
cost<-15
for(i in 1:1000){bsample <- sample(priceData$Wtp, n, replace=TRUE)
mb<-mean(bsample) sb<-sqrt(var(bsample)*3/pi^2)
bootProfit[i]<- profit(optPrice, cost, mb, sb,10000)}
{bsample <- sample(priceData$Wtp, n, replace=TRUE)
mb<-mean(bsample) sb<-sqrt(var(bsample)*3/pi^2)
bootProfit[i]<- profit(optPrice, cost, mb, sb,10000)}
{bsample <- sample(priceData$Wtp, n, replace=TRUE)
mb<-mean(bsample) sb<-sqrt(var(bsample)*3/pi^2)
bootProfit[i]<- (profit(optPrice, cost, mb, sb,10000))}
{bsample <- sample(priceData$Wtp, n, replace=TRUE)
mb<-mean(bsample)
sb<-sqrt(var(bsample)*3/pi^2)
bootProfit[i]<- (profit(optPrice, cost, mb, sb,10000))}
for(i in 1:1000)
{bsample <- sample(priceData$Wtp, n, replace=TRUE)
mb<-mean(bsample)
sb<-sqrt(var(bsample)*3/pi^2)
bootProfit[i]<- (profit(optPrice, cost, mb, sb,10000))}
# compute a bootstrap interval for the range of profits
quantile(bootProfit, probs=c(0.025, 0.975))
plot(bootProfit)
